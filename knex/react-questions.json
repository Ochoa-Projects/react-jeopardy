[
  {
    "question_id": 1,
    "category": "Array Methods",
    "answer": "{filter(),filter}",
    "question": "This array method will iterate through an array and return a new array containing only the items that pass a provided boolean condition."
  },
  {
    "question_id": 2,
    "category": "Array Methods",
    "answer": "{includes(),includes}",
    "question": "This string method is used to check if a substring exists within another string."
  },
  {
    "question_id": 3,
    "category": "Array Methods",
    "answer": "{map(),map}",
    "question": "This array method will iterate through each item in an array, perform an action on each item, and return a new array with each transformed item."
  },
  {
    "question_id": 4,
    "category": "Array Methods",
    "answer": "{forEach(),forEach}",
    "question": "This array method will loop through each item in an array, perform an action on each item, and mutate the original array."
  },
  {
    "question_id": 5,
    "category": "Array Methods",
    "answer": "{reduce(),reduce}",
    "question": "This array method will iterate through each item in an array, and, through an inital value and an accumulator, return one value."
  },
  {
    "question_id": 6,
    "category": "Array Methods",
    "answer": "{sort(),sort}",
    "question": "This array method can be used to organize and mutate an array, for example ascending numerically or alphabetically."
  },
  {
    "question_id": 7,
    "category": "Array Methods",
    "answer": "{includes(),includes}",
    "question": "This array method checks if a specified item exists in an array and returns a boolean value."
  },
  {
    "question_id": 8,
    "category": "Array Methods",
    "answer": "{find(),find}",
    "question": "This array method takes a testing function as an argument and returns only the first item that passes the check."
  },
  {
    "question_id": 9,
    "category": "Array Methods",
    "answer": "{indexOf(),indexOf}",
    "question": "This array method returns the number index of a specific item in an array, and -1 if it is not found."
  },
  {
    "question_id": 10,
    "category": "Array Methods",
    "answer": "{concat(),concat}",
    "question": "This array method takes two or more arrays and returns a new merged array."
  },
  {
    "question_id": 11,
    "category": "Components",
    "answer": "{Class Component,Class}",
    "question": "This implementation of a comopnent ```extends React.Component``` and uses ES6 classes."
  },
  {
    "question_id": 12,
    "category": "Components",
    "answer": "{Functional Component,Functional}",
    "question": "This implementation of a component involves using a Javascript function."
  },
  {
    "question_id": 13,
    "category": "Components",
    "answer": "{Props}",
    "question": "Users can pass and access data using this component attribute."
  },
  {
    "question_id": 15,
    "category": "Components",
    "answer": "{Higher-Order Component,Higher-Order,Higher Order, Higher Order Component}",
    "question": "This is a function that takes a component and returns a new component, typically used to extract and reuse component logic."
  },
  {
    "question_id": 16,
    "category": "Components",
    "answer": "{pure}",
    "question": "A React component is considrered this if it renders the same output for the same state and props."
  },
  {
    "question_id": 17,
    "category": "Components",
    "answer": "{reusability}",
    "question": "This prevents the nuisance of repeating code and is one of the main attractions of using React and React components."
  },
  {
    "question_id": 18,
    "category": "Components",
    "answer": "{forceUpdate(),forceUpdate}",
    "question": "If your render() method depends on data other than state and props, you can tell React that the component needs re-rendering by calling this component method."
  },
  {
    "question_id": 19,
    "category": "Components",
    "answer": "{constructor(),constructor}",
    "question": "This method is called and needed if you intialize state or need to bind methods in a class component."
  },
  {
    "question_id": 20,
    "category": "Components",
    "answer": "{super(),super}",
    "question": "You should call this method with props as its parameter inside the constructor method to avoid this.props from being undefined."
  },
  {
    "question_id": 21,
    "category": "Components",
    "answer": "{render(),render}",
    "question": "This is the only required method in a class component and is responsible for displaying HTML."
  },
  {
    "question_id": 22,
    "category": "Core",
    "answer": "{JSX}",
    "question": "This is a HTML-like syntax that represents what the UI should look like in a React component."
  },
  {
    "question_id": 23,
    "category": "Core",
    "answer": "{React}",
    "question": "This is a front-end JavaScript library that mainly follows the component-based approach for building user interface (UI) components for a single page application."
  },
  {
    "question_id": 24,
    "category": "Core",
    "answer": "{ReactDOM}",
    "question": "This library of a React app compares the element to the previous render and ONLY applies necessary DOM updates."
  },
  {
    "question_id": 25,
    "category": "Core",
    "answer": "{Component}",
    "question": "This feature of React allows users to split the UI into independent, reusable pieces."
  },
  {
    "question_id": 26,
    "category": "Core",
    "answer": "{React Hooks,Hooks}",
    "question": "These are built-in functions that allow React developers to use state and lifecycle methods in React functional components."
  },
  {
    "question_id": 27,
    "category": "Core",
    "answer": "{react-router,react router}",
    "question": "This is a library that allows us build and navigate through a single-page application in React."
  },
  {
    "question_id": 28,
    "category": "Core",
    "answer": "{prototype}",
    "question": "This is the mechanism by which JavaScript objects inherit features from one another."
  },
  {
    "question_id": 29,
    "category": "Core",
    "answer": "{inheritance}",
    "question": "This uses the keyword 'extends' to allow any component to use the properties and methods of another component connected with the parent."
  },
  {
    "question_id": 30,
    "category": "Core",
    "answer": "{Redux}",
    "question": "This is a library used for managing and centralizing application state."
  },
  {
    "question_id": 31,
    "category": "Core",
    "answer": "{Javascript}",
    "question": "This programming language is a cross-platform, object-oriented scripting language used to make webpages interactive."
  },
  {
    "question_id": 32,
    "category": "Core",
    "answer": "{HTML}",
    "question": "This programming laguage defines the meaning and the structure of web content."
  },
  {
    "question_id": 33,
    "category": "Core",
    "answer": "{CSS}",
    "question": "This is a stylesheet language used to describe the presentation of a document written in HTML or XML"
  },
  {
    "question_id": 34,
    "category": "Core",
    "answer": "{state}",
    "question": "Whenever there is a change to the property values of this object, a re-rendering of the component is triggered."
  },
  {
    "question_id": 35,
    "category": "General JS",
    "answer": "{key}",
    "question": "When making lists of elements in React, we need each element to have this unique atrribute provided to it."
  },
  {
    "question_id": 36,
    "category": "General JS",
    "answer": "{this}",
    "question": "This keyword enables you to use the same method definition for every object you create."
  },
  {
    "question_id": 37,
    "category": "General JS",
    "answer": "{for loop,for}",
    "question": "This standard loop allows javascript developers to dictate exactly how many times to run the code inside the loop."
  },
  {
    "question_id": 38,
    "category": "General JS",
    "answer": "{break}",
    "question": "This javascript keyword allows users to exit a loop as a way to prevent the loop from having to run each iteration."
  },
  {
    "question_id": 39,
    "category": "General JS",
    "answer": "{return}",
    "question": "This Javascript keyword gives users the ability to save values from within a function and use these values outside that function's scope."
  },
  {
    "question_id": 40,
    "category": "General JS",
    "answer": "{if statement,if}",
    "question": "This built-in javascript statement allows users to only execute a block of code when a given condition is met."
  },
  {
    "question_id": 41,
    "category": "General JS",
    "answer": "{%,percentage}",
    "question": "This symbol allows javascript to perform modulus calculations, which returns only the remainder of one number being divided by another."
  },
  {
    "question_id": 42,
    "category": "General JS",
    "answer": "{falsy value,falsy}",
    "question": "Undefined, null, NaN, 0, and false are all examples of this."
  },
  {
    "question_id": 43,
    "category": "General JS",
    "answer": "{callback}",
    "question": "This is function that is passed into another function as an argument."
  },
  {
    "question_id": 44,
    "category": "General JS",
    "answer": "{scope}",
    "question": "This is a Javascript concept that decribes the exclusivity of items defined within a function which are not accessible to code outside a function's block."
  },
  {
    "question_id": 45,
    "category": "General JS",
    "answer": "{const}",
    "question": "Use this keyword to create a constant variable in Javascript."
  },
  {
    "question_id": 46,
    "category": "JSX",
    "answer": "{Camel Case,Camel-Case}",
    "question": "Just like Javascript, JSX uses this type of naming convention for the properties of a JSX element."
  },
  {
    "question_id": 47,
    "category": "JSX",
    "answer": "{React.createElement(),React.createElement,createElement(),createElement}",
    "question": "Babel compiles JSX down to this React method/call."
  },
  {
    "question_id": 48,
    "category": "JSX",
    "answer": "{expression}",
    "question": "This can be a React variable, or property, or any other valid JavaScript expression. JSX will execute this and return the result. Denoted by ```{}```"
  },
  {
    "question_id": 49,
    "category": "JSX",
    "answer": "{fragment}",
    "question": "This wraps multiple line and prevents unnecesarily adding extra nodes to the DOM. This looks like an empty HTML tag: ```<></>```"
  },
  {
    "question_id": 50,
    "category": "JSX",
    "answer": "{className}",
    "question": "This JSX attribute replaces the HTML ```class``` attribute."
  },
  {
    "question_id": 51,
    "category": "JSX",
    "answer": "{JavaScript XML}",
    "question": "JSX stands for this."
  },
  {
    "question_id": 52,
    "category": "JSX",
    "answer": "{parent element,parent}",
    "question": "Multiple JSX elements must be wrapped by this."
  },
  {
    "question_id": 53,
    "category": "JSX",
    "answer": "{child element,child}",
    "question": "This element is a sub element of its parent. If it is a component, props can be passed from the parent to this."
  },
  {
    "question_id": 54,
    "category": "JSX",
    "answer": "{return statement,return}",
    "question": "In order for JSX elements to be rendered in react, they must be put in this type of statement."
  },
  {
    "question_id": 55,
    "category": "JSX",
    "answer": "{quotes}",
    "question": "In addition to curly braces, you can use these to specify string literals as attributes."
  },
  {
    "question_id": 56,
    "category": "Props",
    "answer": "{Prop Drilling}",
    "question": "A disadvantage of this way of passing data through a React app is that the components that should otherwise not be aware of the data have access to the data."
  },
  {
    "question_id": 57,
    "category": "Props",
    "answer": "{destructuring}",
    "question": "You can access the entire props object as a function paramater, but you can also isolate individual properties within props using this method."
  },
  {
    "question_id": 58,
    "category": "Props",
    "answer": "{render props}",
    "question": "This term refers to a technique for sharing code between React components using a prop whose value is a function."
  },
  {
    "question_id": 59,
    "category": "Props",
    "answer": "{propTypes}",
    "question": "You can run typechecking on the props of a component using this."
  },
  {
    "question_id": 60,
    "category": "Props",
    "answer": "{defaultProps}",
    "question": "This allows you to set default values for the props argument."
  },
  {
    "question_id": 61,
    "category": "Props",
    "answer": "{this.props}",
    "question": "If you are using class components, you can access the props from this property of the component instance."
  },
  {
    "question_id": 62,
    "category": "Props",
    "answer": "{pure functions,pure}",
    "question": "All React components must act like these types of functions with respect to their props."
  },
  {
    "question_id": 63,
    "category": "Props",
    "answer": "{this.props.name}",
    "question": "You would access a prop called name in a class component using this."
  },
  {
    "question_id": 64,
    "category": "Props",
    "answer": "{object}",
    "question": "Props is this kind of data type."
  },
  {
    "question_id": 65,
    "category": "Props",
    "answer": "{properties}",
    "question": "Props stands for this."
  },
  {
    "question_id": 66,
    "category": "React Hooks",
    "answer": "{useState(),useState}",
    "question": "This React Hook allows for funcional components to manage state."
  },
  {
    "question_id": 67,
    "category": "React Hooks",
    "answer": "{setState(),setState}",
    "question": "This is the second value of the array returned when the React Hook ```useState()``` is called."
  },
  {
    "question_id": 68,
    "category": "React Hooks",
    "answer": "{useEffect(),useEffect}",
    "question": "This React Hook is ideal when React developers need to fetch data in a functional component."
  },
  {
    "question_id": 69,
    "category": "React Hooks",
    "answer": "{useEffect(),useEffect}",
    "question": "This React Hook by default will run after the first render and also after each time the component is updated."
  },
  {
    "question_id": 70,
    "category": "React Hooks",
    "answer": "{Custom Hooks,Custom}",
    "question": "These types of Hooks are considered to be sufficient replacements for render props and HoCs (Higher-Order components) and reducing the amount of nesting required."
  },
  {
    "question_id": 71,
    "category": "React Hooks",
    "answer": "{useContext(),useContext}",
    "question": "This hook is used for creating common data that is to be accessed by the components hierarchy without having to pass the props down to each level."
  },
  {
    "question_id": 72,
    "category": "React Hooks",
    "answer": "{useReducer(),useReducer}",
    "question": "This hook is used when there is complex state logic that has several sub-values or new state is dependent on the previous state."
  },
  {
    "question_id": 73,
    "category": "React Hooks",
    "answer": "{useRef(),useRef}",
    "question": "One example of when to use this hook would be to avoid infinite re-renders with the useState() hook. This hook does not cause a component re-render when its value is changed."
  },
  {
    "question_id": 74,
    "category": "React Hooks",
    "answer": "{useCallback(),useCallback}",
    "question": "This lets you cache a function definition between re-renders."
  },
  {
    "question_id": 75,
    "category": "React Hooks",
    "answer": "{useMemo(),useMemo}",
    "question": "This lets you cache the result of a calculation between re-renders."
  },
  {
    "question_id": 76,
    "category": "React Hooks",
    "answer": "{useLayoutEffect(),useLayoutEffect}",
    "question": "This is a version of useEffect that fires before the browser repaints the screen."
  },
  {
    "question_id": 77,
    "category": "ReactDOM",
    "answer": "{Virtual DOM}",
    "question": "This is a concept where a representation of the real DOM is kept inside the memory and is synced with the real DOM by a library such as ReactDOM"
  },
  {
    "question_id": 78,
    "category": "ReactDOM",
    "answer": "{createPortal(),createPortal}",
    "question": "This method provides a way to render children into a DOM node that exists outside the hierarchy of the DOM component."
  },
  {
    "question_id": 79,
    "category": "ReactDOM",
    "answer": "{flushSync(),flushSync}",
    "question": "This method forces React to flush any updates inside the provided callback synchronously, which ensures the DOM is updated immediately."
  },
  {
    "question_id": 80,
    "category": "ReactDOM",
    "answer": "{createRoot(),createRoot}",
    "question": "This creates a react root for the supplied container and returns the root. "
  },
  {
    "question_id": 81,
    "category": "ReactDOM",
    "answer": "{hydrateRoot(),hydrateRoot}",
    "question": "Similar to createRoot(), this is used to hydrate a container whose HTML contents were rendered by ReactDOMServer."
  },
  {
    "question_id": 82,
    "category": "ReactDOM",
    "answer": "{renderToPipeableStream(),renderToPipeableStream}",
    "question": "This renders a React element to its initial HTML. Returns a stream with a pip(res) method to pipe the output and abort() to abort the request."
  },
  {
    "question_id": 83,
    "category": "ReactDOM",
    "answer": "{renderToReadableStream(),renderToReadableStream}",
    "question": "This streams a React element to its initial HTML. It returns a Promise that resolves to a Readable Stream."
  },
  {
    "question_id": 84,
    "category": "ReactDOM",
    "answer": "{renderToStaticMarkup(),renderToStaticMarkup}",
    "question": "Similar to renderToString, escept this doesn't create extra DOM attributes that React uses internally. Useful if you want to use React as a simple static page generator."
  },
  {
    "question_id": 85,
    "category": "ReactDOM",
    "answer": "{renderToString(),renderToString}",
    "question": "This renders a React element to its inititial HTML. React will return an HTML string. Used for faster page loads and to allow search engines to crawl your pages for SEO purposes."
  },
  {
    "question_id": 86,
    "category": "ReactDOM",
    "answer": "{renderToStaticNodeStream(),renderToStaticNodeStream}",
    "question": "Similar to renderToNodeStream, except this doesn't create extra DOM attributes that React uses internally, such as data-reactroot."
  },
  {
    "question_id": 87,
    "category": "ReactDOM",
    "answer": "{renderToNodeStream(),renderToNodeStream}",
    "question": "This renders a React element to its initial HTML and returns a Node.js Readable stream that outputs an HTML string."
  },
  {
    "question_id": 88,
    "category": "CSS",
    "answer": "{flexbox}",
    "question": "This allows responsive elements within a container to be automatically arranged depending on viewport size."
  },
  {
    "question_id": 89,
    "category": "CSS",
    "answer": "{CSS grid,grid}",
    "question": "This offers a layout system based on rows and columns making it easier to design web pages with having to use floats and positioning. "
  },
  {
    "question_id": 90,
    "category": "CSS",
    "answer": "{box model,box,box-model}",
    "question": "This is the concept that a rectangular container is wrapped around every HTML element."
  },
  {
    "question_id": 91,
    "category": "CSS",
    "answer": "{universal selector,universal,*}",
    "question": "This works like a wildcard character, selecting all elements on the page."
  },
  {
    "question_id": 92,
    "category": "CSS",
    "answer": "{element type selector,element type}",
    "question": "This selector matches to one or more types of HTML elements of the same name."
  },
  {
    "question_id": 93,
    "category": "CSS",
    "answer": "{ID selector,ID}",
    "question": "This matches any HTML element that has an ID attribute with the same value as that of the selector."
  },
  {
    "question_id": 94,
    "category": "CSS",
    "answer": "{class selector,class}",
    "question": "This matches all HTML elements on the page that have their class attribute set to the same value as the class."
  },
  {
    "question_id": 95,
    "category": "CSS",
    "answer": "{descendant combinator,descendant}",
    "question": "This lets you combine two or more selectors to allow for more specific selection methods."
  },
  {
    "question_id": 96,
    "category": "CSS",
    "answer": "{child combinator,child}",
    "question": "This is similar to the descendant combinator, however this only targets immediate child elements."
  },
  {
    "question_id": 97,
    "category": "CSS",
    "answer": "{general sibling combinator,general sibling}",
    "question": "This selector matches elements based on sibling relationships."
  },
  {
    "question_id": 98,
    "category": "CSS",
    "answer": "{adjacent sibling combinator,adjacent sibling}",
    "question": "This is similar to the general sibling operator, the difference is that this targets only immediate siblings."
  },
  {
    "question_id": 99,
    "category": "CSS",
    "answer": "{attribute selector,attribute}",
    "question": "Denoted by square brackets, this targets elements based on the presence/values of HTML attributes."
  },
  {
    "question_id": 100,
    "category": "Misc",
    "answer": "{Jest}",
    "question": "This is the testing library most often associated with React."
  },
  {
    "question_id": 101,
    "category": "Misc",
    "answer": "{Babel}",
    "question": "This is the tool used to take JSX and turn it into createElement calls."
  },
  {
    "question_id": 102,
    "category": "Misc",
    "answer": "{React.lazy(),React.lazy,lazy(),lazy}",
    "question": "You can use this React function to handle code splitting."
  },
  {
    "question_id": 103,
    "category": "Misc",
    "answer": "{ESLint,lint}",
    "question": "This staic code analysis tool combs your code to quickly find problems. It is built into most text editors and can be ran as part of a continuous integration pipeline."
  },
  {
    "question_id": 104,
    "category": "Misc",
    "answer": "{componentDidMount(),componentDidMount}",
    "question": "This Lifecycle method runs after the inital component output has been rendered to the DOM."
  },
  {
    "question_id": 105,
    "category": "Misc",
    "answer": "{componentWillUnmount(),componentWillUnmount}",
    "question": "This is the lifecycle method that is called before a component is removed from the DOM."
  },
  {
    "question_id": 106,
    "category": "Misc",
    "answer": "{componentDidUpdate(),componentDidUpdate}",
    "question": "This lifecycle method is invoked immediately after updating occurs, i.e. changes in props or state."
  },
  {
    "question_id": 107,
    "category": "Misc",
    "answer": "{server side rendering,server side,server-side rendering,server-side}",
    "question": "This type of rendering works by converting HTML files in the server into usable information for the browser."
  },
  {
    "question_id": 108,
    "category": "Misc",
    "answer": "{client side rendering,client side,client-side rendering,client-side}",
    "question": "When developers talk about this type of rendering, they're talking about rendering content in th ebrowser using JavaScript."
  },
  {
    "question_id": 109,
    "category": "Misc",
    "answer": "{NextJS}",
    "question": "This web development framework created by Vercel enables React-based web applications with server-side rendering and generating static websites."
  },
  {
    "question_id": 110,
    "category": "NextJS",
    "answer": "{getServerSideProps(), getServerSideProps}",
    "question": "This Next data fetching tool only runs server-side and Next.js will pre-render this page on each request using the data returned by this."
  },
  {
    "question_id": 111,
    "category": "NextJS",
    "answer": "{getStaticProps(), getStaticProps}",
    "question": "Used primarily with static site generation, Next.js will pre-render this page at build time using the props returned by this."
  },
  {
    "question_id": 112,
    "category": "NextJS",
    "answer": "{getStaticPaths(), getStaticPaths}",
    "question": "If a page has dynamic routes and uses Next.js's getStaticProps, it needs to define a list of paths to be statically generated. Next.js will statically pre-render all the paths specified by this."
  },
  {
    "question_id": 113,
    "category": "NextJS",
    "answer": "{Fast Refresh}",
    "question": "This is a Next.js feature that gives you instantaneous feedback on edits made to your React components. When this is enabled, most edits should be visible within a second, without losing component state."
  },
  {
    "question_id": 114,
    "category": "NextJS",
    "answer": "{Link}",
    "question": "Next.js provides a React component called this to do client-side route transition."
  },
  {
    "question_id": 115,
    "category": "NextJS",
    "answer": "{brackets,[]}",
    "question": "In Next.js, you can add these to a page in the file structure to create a dynamic route."
  },
  {
    "question_id": 116,
    "category": "NextJS",
    "answer": "{Image}",
    "question": "This Next.js component is an extension of the HTML <imb> element and inclusdes a variety of built-in performance optimizations."
  },
  {
    "question_id": 117,
    "category": "NextJS",
    "answer": "{public}",
    "question": "Next.js can serve static files in this folder and files inside this folder can then be referenced by your code starting from the base URL '/'."
  },
  {
    "question_id": 118,
    "category": "NextJS",
    "answer": "{useRouter(), useRouter}",
    "question": "In Next.js, if you want to access the router object inside any function component in your app, you can use this hook."
  },
  {
    "question_id": 119,
    "category": "NextJS",
    "answer": "{push(), push}",
    "question": "This router object method handles client-side transitions, and is useful for cases where 'next/link' is not enough."
  }
]
